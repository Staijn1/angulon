name: Build and Deploy

on:
  push:
  workflow_dispatch:

jobs:
  build:
    name: Build and lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: nrwl/nx-set-shas@v2
      - run: npm i
      - run: npx nx workspace-lint
      - run: npx nx affected --target=build --parallel=3
      - run: npx nx affected --target=lint --parallel=3
      - run: npx nx affected --target=test --parallel=3

  deploy:
    runs-on: ubuntu-latest
    name: Docker Deploy
    needs: build
    if: github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0
        with:
          versionSpec: '5.x'


      - name: Determine Version
        uses: gittools/actions/gitversion/execute@v0
        id:   gitversion
        with:
          useConfigFile: true
          additionalArguments: '/showConfig'

      - name: Display GitVersion outputs (step output)
        run: |
         echo "Major: ${{ env.major }}"
         echo "Minor: ${{ env.minor }}"
         echo "Patch: ${{ env.patch }}"
         echo "PreReleaseTag: ${{ env.preReleaseTag }}"
         echo "PreReleaseTagWithDash: ${{ env.preReleaseTagWithDash }}"
         echo "PreReleaseLabel: ${{ env.preReleaseLabel }}"
         echo "PreReleaseNumber: ${{ env.preReleaseNumber }}"
         echo "WeightedPreReleaseNumber: ${{ env.weightedPreReleaseNumber }}"
         echo "BuildMetaData: ${{ env.buildMetaData }}"
         echo "BuildMetaDataPadded: ${{ env.buildMetaDataPadded }}"
         echo "FullBuildMetaData: ${{ env.fullBuildMetaData }}"
         echo "MajorMinorPatch: ${{ env.majorMinorPatch }}"
         echo "SemVer: ${{ env.semVer }}"
         echo "LegacySemVer: ${{ env.legacySemVer }}"
         echo "LegacySemVerPadded: ${{ env.legacySemVerPadded }}"
         echo "AssemblySemVer: ${{ env.assemblySemVer }}"
         echo "AssemblySemFileVer: ${{ env.assemblySemFileVer }}"
         echo "FullSemVer: ${{ env.fullSemVer }}"
         echo "InformationalVersion: ${{ env.informationalVersion }}"
         echo "BranchName: ${{ env.branchName }}"
         echo "EscapedBranchName: ${{ env.escapedBranchName }}"
         echo "Sha: ${{ env.sha }}"
         echo "ShortSha: ${{ env.shortSha }}"
         echo "NuGetVersionV2: ${{ env.nuGetVersionV2 }}"
         echo "NuGetVersion: ${{ env.nuGetVersion }}"
         echo "NuGetPreReleaseTagV2: ${{ env.nuGetPreReleaseTagV2 }}"
         echo "NuGetPreReleaseTag: ${{ env.nuGetPreReleaseTag }}"
         echo "VersionSourceSha: ${{ env.versionSourceSha }}"
         echo "CommitsSinceVersionSource: ${{ env.commitsSinceVersionSource }}"
         echo "CommitsSinceVersionSourcePadded: ${{ env.commitsSinceVersionSourcePadded }}"
         echo "UncommittedChanges: ${{ env.uncommittedChanges }}"
         echo "CommitDate: ${{ env.commitDate }}"

      - name: Display version
        run: |
          echo SemVer: $SEMVER

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.TOKEN }}

      # Add support for more platforms with QEMU (optional)
      # https://github.com/docker/setup-qemu-action
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create custom buildx builder
        run: docker buildx create --name mybuilder
      - name: Use the created builder
        run: docker buildx use mybuilder
      - name: Bootstrap builder
        run: docker buildx inspect --bootstrap


      - name: Build and push base image
        run: docker buildx build --platform=linux/arm64/v8,linux/amd64 -t ${{ secrets.USERNAME }}/angulon:nx-base -t ${{secrets.USERNAME}}/angulon:nx-base-${SEMVER} --push .
      - name: Build sub-application images
        run: docker buildx bake --push --set *.platform=linux/arm64/v8,linux/amd64
